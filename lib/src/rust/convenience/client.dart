// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QuicClient>>
abstract class QuicClient implements RustOpaqueInterface {}

/// Configuration for QuicClient
class QuicClientConfig {
  /// Maximum number of connections per host
  final BigInt maxConnectionsPerHost;

  /// Connection timeout in milliseconds
  final BigInt connectTimeoutMs;

  /// Request timeout in milliseconds
  final BigInt requestTimeoutMs;

  /// Number of retry attempts for failed requests
  final int retryAttempts;

  /// Retry delay in milliseconds
  final BigInt retryDelayMs;

  /// Keep-alive timeout for connections in milliseconds
  final BigInt keepAliveTimeoutMs;

  const QuicClientConfig({
    required this.maxConnectionsPerHost,
    required this.connectTimeoutMs,
    required this.requestTimeoutMs,
    required this.retryAttempts,
    required this.retryDelayMs,
    required this.keepAliveTimeoutMs,
  });

  @override
  int get hashCode =>
      maxConnectionsPerHost.hashCode ^
      connectTimeoutMs.hashCode ^
      requestTimeoutMs.hashCode ^
      retryAttempts.hashCode ^
      retryDelayMs.hashCode ^
      keepAliveTimeoutMs.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is QuicClientConfig &&
          runtimeType == other.runtimeType &&
          maxConnectionsPerHost == other.maxConnectionsPerHost &&
          connectTimeoutMs == other.connectTimeoutMs &&
          requestTimeoutMs == other.requestTimeoutMs &&
          retryAttempts == other.retryAttempts &&
          retryDelayMs == other.retryDelayMs &&
          keepAliveTimeoutMs == other.keepAliveTimeoutMs;
}
