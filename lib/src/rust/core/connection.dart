// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QuicConnection>>
abstract class QuicConnection implements RustOpaqueInterface {}

/// Connection statistics from Quinn
class QuicConnectionStats {
  final QuicPathStats path;
  final QuicFrameStats frameTx;
  final QuicFrameStats frameRx;
  final QuicUdpStats udpTx;
  final QuicUdpStats udpRx;

  const QuicConnectionStats({
    required this.path,
    required this.frameTx,
    required this.frameRx,
    required this.udpTx,
    required this.udpRx,
  });

  @override
  int get hashCode =>
      path.hashCode ^
      frameTx.hashCode ^
      frameRx.hashCode ^
      udpTx.hashCode ^
      udpRx.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is QuicConnectionStats &&
          runtimeType == other.runtimeType &&
          path == other.path &&
          frameTx == other.frameTx &&
          frameRx == other.frameRx &&
          udpTx == other.udpTx &&
          udpRx == other.udpRx;
}

/// Frame transmission/reception statistics
class QuicFrameStats {
  final BigInt acks;
  final BigInt crypto;
  final BigInt connectionClose;
  final BigInt dataBlocked;
  final BigInt datagram;
  final BigInt handshakeDone;
  final BigInt maxData;
  final BigInt maxStreamData;
  final BigInt maxStreamsBidi;
  final BigInt maxStreamsUni;
  final BigInt newConnectionId;
  final BigInt newToken;
  final BigInt pathChallenge;
  final BigInt pathResponse;
  final BigInt ping;
  final BigInt resetStream;
  final BigInt retireConnectionId;
  final BigInt stream;
  final BigInt streamDataBlocked;
  final BigInt streamsBlockedBidi;
  final BigInt streamsBlockedUni;
  final BigInt stopSending;

  const QuicFrameStats({
    required this.acks,
    required this.crypto,
    required this.connectionClose,
    required this.dataBlocked,
    required this.datagram,
    required this.handshakeDone,
    required this.maxData,
    required this.maxStreamData,
    required this.maxStreamsBidi,
    required this.maxStreamsUni,
    required this.newConnectionId,
    required this.newToken,
    required this.pathChallenge,
    required this.pathResponse,
    required this.ping,
    required this.resetStream,
    required this.retireConnectionId,
    required this.stream,
    required this.streamDataBlocked,
    required this.streamsBlockedBidi,
    required this.streamsBlockedUni,
    required this.stopSending,
  });

  @override
  int get hashCode =>
      acks.hashCode ^
      crypto.hashCode ^
      connectionClose.hashCode ^
      dataBlocked.hashCode ^
      datagram.hashCode ^
      handshakeDone.hashCode ^
      maxData.hashCode ^
      maxStreamData.hashCode ^
      maxStreamsBidi.hashCode ^
      maxStreamsUni.hashCode ^
      newConnectionId.hashCode ^
      newToken.hashCode ^
      pathChallenge.hashCode ^
      pathResponse.hashCode ^
      ping.hashCode ^
      resetStream.hashCode ^
      retireConnectionId.hashCode ^
      stream.hashCode ^
      streamDataBlocked.hashCode ^
      streamsBlockedBidi.hashCode ^
      streamsBlockedUni.hashCode ^
      stopSending.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is QuicFrameStats &&
          runtimeType == other.runtimeType &&
          acks == other.acks &&
          crypto == other.crypto &&
          connectionClose == other.connectionClose &&
          dataBlocked == other.dataBlocked &&
          datagram == other.datagram &&
          handshakeDone == other.handshakeDone &&
          maxData == other.maxData &&
          maxStreamData == other.maxStreamData &&
          maxStreamsBidi == other.maxStreamsBidi &&
          maxStreamsUni == other.maxStreamsUni &&
          newConnectionId == other.newConnectionId &&
          newToken == other.newToken &&
          pathChallenge == other.pathChallenge &&
          pathResponse == other.pathResponse &&
          ping == other.ping &&
          resetStream == other.resetStream &&
          retireConnectionId == other.retireConnectionId &&
          stream == other.stream &&
          streamDataBlocked == other.streamDataBlocked &&
          streamsBlockedBidi == other.streamsBlockedBidi &&
          streamsBlockedUni == other.streamsBlockedUni &&
          stopSending == other.stopSending;
}

/// Path-specific statistics
class QuicPathStats {
  final BigInt rttMillis;
  final BigInt cwnd;
  final BigInt lostPackets;
  final BigInt lostBytes;
  final BigInt sentPackets;
  final BigInt congestionEvents;

  const QuicPathStats({
    required this.rttMillis,
    required this.cwnd,
    required this.lostPackets,
    required this.lostBytes,
    required this.sentPackets,
    required this.congestionEvents,
  });

  @override
  int get hashCode =>
      rttMillis.hashCode ^
      cwnd.hashCode ^
      lostPackets.hashCode ^
      lostBytes.hashCode ^
      sentPackets.hashCode ^
      congestionEvents.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is QuicPathStats &&
          runtimeType == other.runtimeType &&
          rttMillis == other.rttMillis &&
          cwnd == other.cwnd &&
          lostPackets == other.lostPackets &&
          lostBytes == other.lostBytes &&
          sentPackets == other.sentPackets &&
          congestionEvents == other.congestionEvents;
}

/// UDP-level statistics
class QuicUdpStats {
  final BigInt datagrams;
  final BigInt bytes;
  final BigInt ios;

  const QuicUdpStats({
    required this.datagrams,
    required this.bytes,
    required this.ios,
  });

  @override
  int get hashCode => datagrams.hashCode ^ bytes.hashCode ^ ios.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is QuicUdpStats &&
          runtimeType == other.runtimeType &&
          datagrams == other.datagrams &&
          bytes == other.bytes &&
          ios == other.ios;
}
