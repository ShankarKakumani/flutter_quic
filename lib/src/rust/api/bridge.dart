// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../convenience/client.dart';
import '../core/config.dart';
import '../core/connection.dart';
import '../core/endpoint.dart';
import '../core/stream.dart';
import '../errors.dart';
import '../frb_generated.dart';
import '../models/types.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Create a new QUIC client endpoint
Future<QuicEndpoint> createClientEndpoint() =>
    RustLib.instance.api.crateApiBridgeCreateClientEndpoint();

/// Create a new QUIC server endpoint
Future<QuicEndpoint> createServerEndpoint({
  required QuicServerConfig config,
  required String addr,
}) => RustLib.instance.api.crateApiBridgeCreateServerEndpoint(
  config: config,
  addr: addr,
);

/// Write data to a QUIC send stream
/// This exposes the QuicSendStream.write() method to flutter_rust_bridge
Future<(QuicSendStream, BigInt)> sendStreamWrite({
  required QuicSendStream stream,
  required List<int> data,
}) => RustLib.instance.api.crateApiBridgeSendStreamWrite(
  stream: stream,
  data: data,
);

/// Write all data to a QUIC send stream
/// This exposes the QuicSendStream.write_all() method to flutter_rust_bridge
Future<QuicSendStream> sendStreamWriteAll({
  required QuicSendStream stream,
  required List<int> data,
}) => RustLib.instance.api.crateApiBridgeSendStreamWriteAll(
  stream: stream,
  data: data,
);

/// Finish a QUIC send stream
/// This exposes the QuicSendStream.finish() method to flutter_rust_bridge
Future<QuicSendStream> sendStreamFinish({required QuicSendStream stream}) =>
    RustLib.instance.api.crateApiBridgeSendStreamFinish(stream: stream);

/// Read data from a QUIC recv stream
/// This exposes the QuicRecvStream.read() method to flutter_rust_bridge
Future<(QuicRecvStream, Uint8List?)> recvStreamRead({
  required QuicRecvStream stream,
  required BigInt maxLength,
}) => RustLib.instance.api.crateApiBridgeRecvStreamRead(
  stream: stream,
  maxLength: maxLength,
);

/// Read all remaining data from a QUIC recv stream
/// This exposes the QuicRecvStream.read_to_end() method to flutter_rust_bridge
Future<(QuicRecvStream, Uint8List)> recvStreamReadToEnd({
  required QuicRecvStream stream,
  required BigInt maxLength,
}) => RustLib.instance.api.crateApiBridgeRecvStreamReadToEnd(
  stream: stream,
  maxLength: maxLength,
);

/// Open a bidirectional stream on a QUIC connection
/// This exposes the QuicConnection.open_bi() method to flutter_rust_bridge
Future<(QuicConnection, QuicSendStream, QuicRecvStream)> connectionOpenBi({
  required QuicConnection connection,
}) =>
    RustLib.instance.api.crateApiBridgeConnectionOpenBi(connection: connection);

/// Open a unidirectional stream on a QUIC connection
/// This exposes the QuicConnection.open_uni() method to flutter_rust_bridge
Future<(QuicConnection, QuicSendStream)> connectionOpenUni({
  required QuicConnection connection,
}) => RustLib.instance.api.crateApiBridgeConnectionOpenUni(
  connection: connection,
);

/// Connect to a server using a QUIC endpoint
/// This exposes the QuicEndpoint.connect() method to flutter_rust_bridge
Future<(QuicEndpoint, QuicConnection)> endpointConnect({
  required QuicEndpoint endpoint,
  required String addr,
  required String serverName,
}) => RustLib.instance.api.crateApiBridgeEndpointConnect(
  endpoint: endpoint,
  addr: addr,
  serverName: serverName,
);

/// Send a datagram on a QUIC connection
/// This exposes the QuicConnection.send_datagram() method to flutter_rust_bridge
Future<QuicConnection> connectionSendDatagram({
  required QuicConnection connection,
  required List<int> data,
}) => RustLib.instance.api.crateApiBridgeConnectionSendDatagram(
  connection: connection,
  data: data,
);

/// Send a datagram with backpressure on a QUIC connection
/// This exposes the QuicConnection.send_datagram_wait() method to flutter_rust_bridge
Future<QuicConnection> connectionSendDatagramWait({
  required QuicConnection connection,
  required List<int> data,
}) => RustLib.instance.api.crateApiBridgeConnectionSendDatagramWait(
  connection: connection,
  data: data,
);

/// Read a datagram from a QUIC connection
/// This exposes the QuicConnection.read_datagram() method to flutter_rust_bridge
Future<(QuicConnection, Uint8List?)> connectionReadDatagram({
  required QuicConnection connection,
}) => RustLib.instance.api.crateApiBridgeConnectionReadDatagram(
  connection: connection,
);

/// Get datagram send buffer space
/// This exposes the QuicConnection.datagram_send_buffer_space() method to flutter_rust_bridge
Future<(QuicConnection, BigInt)> connectionDatagramSendBufferSpace({
  required QuicConnection connection,
}) => RustLib.instance.api.crateApiBridgeConnectionDatagramSendBufferSpace(
  connection: connection,
);

/// Get maximum datagram size
/// This exposes the QuicConnection.max_datagram_size() method to flutter_rust_bridge
Future<(QuicConnection, BigInt?)> connectionMaxDatagramSize({
  required QuicConnection connection,
}) => RustLib.instance.api.crateApiBridgeConnectionMaxDatagramSize(
  connection: connection,
);

/// Get the remote address of a QUIC connection
/// This exposes the QuicConnection.remote_address() method to flutter_rust_bridge
Future<(QuicConnection, SocketAddress)> connectionRemoteAddress({
  required QuicConnection connection,
}) => RustLib.instance.api.crateApiBridgeConnectionRemoteAddress(
  connection: connection,
);

/// Get the local IP address of a QUIC connection
/// This exposes the QuicConnection.local_ip() method to flutter_rust_bridge
Future<(QuicConnection, String?)> connectionLocalIp({
  required QuicConnection connection,
}) => RustLib.instance.api.crateApiBridgeConnectionLocalIp(
  connection: connection,
);

/// Get the RTT of a QUIC connection in milliseconds
/// This exposes the QuicConnection.rtt() method to flutter_rust_bridge
Future<(QuicConnection, BigInt)> connectionRttMillis({
  required QuicConnection connection,
}) => RustLib.instance.api.crateApiBridgeConnectionRttMillis(
  connection: connection,
);

/// Get the stable ID of a QUIC connection
/// This exposes the QuicConnection.stable_id() method to flutter_rust_bridge
Future<(QuicConnection, BigInt)> connectionStableId({
  required QuicConnection connection,
}) => RustLib.instance.api.crateApiBridgeConnectionStableId(
  connection: connection,
);

/// Get the close reason of a QUIC connection
/// This exposes the QuicConnection.close_reason() method to flutter_rust_bridge
Future<(QuicConnection, String?)> connectionCloseReason({
  required QuicConnection connection,
}) => RustLib.instance.api.crateApiBridgeConnectionCloseReason(
  connection: connection,
);

/// Get the statistics of a QUIC connection
/// This exposes the QuicConnection.stats() method to flutter_rust_bridge
Future<(QuicConnection, QuicConnectionStats)> connectionStats({
  required QuicConnection connection,
}) =>
    RustLib.instance.api.crateApiBridgeConnectionStats(connection: connection);

/// Create a new server config with single certificate
Future<QuicServerConfig> serverConfigWithSingleCert({
  required List<Uint8List> certChain,
  required List<int> key,
}) => RustLib.instance.api.crateApiBridgeServerConfigWithSingleCert(
  certChain: certChain,
  key: key,
);

/// Create a new transport config
Future<QuicTransportConfig> transportConfigNew() =>
    RustLib.instance.api.crateApiBridgeTransportConfigNew();

/// Create a new endpoint config
Future<QuicEndpointConfig> endpointConfigNew() =>
    RustLib.instance.api.crateApiBridgeEndpointConfigNew();

Future<void> exposeTypesForFrbGeneration() =>
    RustLib.instance.api.crateApiBridgeExposeTypesForFrbGeneration();

Future<QuicConnection> exposeConnectionType({
  required QuicConnection connection,
}) => RustLib.instance.api.crateApiBridgeExposeConnectionType(
  connection: connection,
);

Future<QuicSendStream> exposeSendStreamType({required QuicSendStream stream}) =>
    RustLib.instance.api.crateApiBridgeExposeSendStreamType(stream: stream);

Future<QuicRecvStream> exposeRecvStreamType({required QuicRecvStream stream}) =>
    RustLib.instance.api.crateApiBridgeExposeRecvStreamType(stream: stream);

/// Create a new QuicClient with default configuration
Future<QuicClient> quicClientCreate() =>
    RustLib.instance.api.crateApiBridgeQuicClientCreate();

/// Create a new QuicClient with custom configuration
Future<QuicClient> quicClientCreateWithConfig({
  required QuicClientConfig config,
}) => RustLib.instance.api.crateApiBridgeQuicClientCreateWithConfig(
  config: config,
);

/// Send data using QuicClient and return response
Future<(QuicClient, String)> quicClientSend({
  required QuicClient client,
  required String url,
  required String data,
}) => RustLib.instance.api.crateApiBridgeQuicClientSend(
  client: client,
  url: url,
  data: data,
);

/// Send data with timeout using QuicClient
Future<(QuicClient, String)> quicClientSendWithTimeout({
  required QuicClient client,
  required String url,
  required String data,
}) => RustLib.instance.api.crateApiBridgeQuicClientSendWithTimeout(
  client: client,
  url: url,
  data: data,
);

/// Send a GET request using QuicClient
Future<(QuicClient, String)> quicClientGet({
  required QuicClient client,
  required String url,
}) =>
    RustLib.instance.api.crateApiBridgeQuicClientGet(client: client, url: url);

/// Send a POST request using QuicClient
Future<(QuicClient, String)> quicClientPost({
  required QuicClient client,
  required String url,
  required String data,
}) => RustLib.instance.api.crateApiBridgeQuicClientPost(
  client: client,
  url: url,
  data: data,
);

/// Send a GET request with timeout using QuicClient
Future<(QuicClient, String)> quicClientGetWithTimeout({
  required QuicClient client,
  required String url,
}) => RustLib.instance.api.crateApiBridgeQuicClientGetWithTimeout(
  client: client,
  url: url,
);

/// Send a POST request with timeout using QuicClient
Future<(QuicClient, String)> quicClientPostWithTimeout({
  required QuicClient client,
  required String url,
  required String data,
}) => RustLib.instance.api.crateApiBridgeQuicClientPostWithTimeout(
  client: client,
  url: url,
  data: data,
);

/// Get QuicClient configuration
Future<(QuicClient, QuicClientConfig)> quicClientConfig({
  required QuicClient client,
}) => RustLib.instance.api.crateApiBridgeQuicClientConfig(client: client);

/// Clear QuicClient connection pool
Future<QuicClient> quicClientClearPool({required QuicClient client}) =>
    RustLib.instance.api.crateApiBridgeQuicClientClearPool(client: client);

/// Create a new QuicClientConfig with default values
Future<QuicClientConfig> quicClientConfigNew() =>
    RustLib.instance.api.crateApiBridgeQuicClientConfigNew();

/// Expose QuicClient and QuicClientConfig types for flutter_rust_bridge
Future<QuicClient> exposeQuicClientType({required QuicClient client}) =>
    RustLib.instance.api.crateApiBridgeExposeQuicClientType(client: client);

Future<QuicClientConfig> exposeQuicClientConfigType({
  required QuicClientConfig config,
}) => RustLib.instance.api.crateApiBridgeExposeQuicClientConfigType(
  config: config,
);
