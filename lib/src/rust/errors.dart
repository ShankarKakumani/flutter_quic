// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'errors.freezed.dart';

@freezed
sealed class QuicDatagramException
    with _$QuicDatagramException
    implements FrbException {
  const QuicDatagramException._();

  const factory QuicDatagramException.unsupportedByPeer() =
      QuicDatagramException_UnsupportedByPeer;
  const factory QuicDatagramException.tooLarge({required BigInt maxSize}) =
      QuicDatagramException_TooLarge;
  const factory QuicDatagramException.connectionLost(String field0) =
      QuicDatagramException_ConnectionLost;
}

@freezed
sealed class QuicError with _$QuicError implements FrbException {
  const QuicError._();

  const factory QuicError.connection(String field0) = QuicError_Connection;
  const factory QuicError.endpoint(String field0) = QuicError_Endpoint;
  const factory QuicError.stream(String field0) = QuicError_Stream;
  const factory QuicError.tls(String field0) = QuicError_Tls;
  const factory QuicError.config(String field0) = QuicError_Config;
  const factory QuicError.network(String field0) = QuicError_Network;
  const factory QuicError.write(String field0) = QuicError_Write;
}

@freezed
sealed class QuicReadException
    with _$QuicReadException
    implements FrbException {
  const QuicReadException._();

  const factory QuicReadException.reset(BigInt field0) =
      QuicReadException_Reset;
  const factory QuicReadException.connectionLost(String field0) =
      QuicReadException_ConnectionLost;
  const factory QuicReadException.zeroRttRejected() =
      QuicReadException_ZeroRttRejected;
  const factory QuicReadException.closedStream() =
      QuicReadException_ClosedStream;
  const factory QuicReadException.illegalOrderedRead() =
      QuicReadException_IllegalOrderedRead;
}

@freezed
sealed class QuicReadToEndException
    with _$QuicReadToEndException
    implements FrbException {
  const QuicReadToEndException._();

  const factory QuicReadToEndException.read(QuicReadException field0) =
      QuicReadToEndException_Read;
  const factory QuicReadToEndException.tooLong() =
      QuicReadToEndException_TooLong;
}

@freezed
sealed class QuicWriteException
    with _$QuicWriteException
    implements FrbException {
  const QuicWriteException._();

  const factory QuicWriteException.stopped(BigInt field0) =
      QuicWriteException_Stopped;
  const factory QuicWriteException.connectionLost(String field0) =
      QuicWriteException_ConnectionLost;
}
