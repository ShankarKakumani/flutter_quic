// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/bridge.dart';
import 'convenience/client.dart';
import 'core/config.dart';
import 'core/connection.dart';
import 'core/endpoint.dart';
import 'core/stream.dart';
import 'dart:async';
import 'dart:convert';
import 'errors.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'models/types.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiBridgeInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -1226864594;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'flutter_quic',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<QuicConnection> crateApiBridgeExposeConnectionType({
    required QuicConnection connection,
  });

  Future<QuicClientConfig> crateApiBridgeExposeQuicClientConfigType({
    required QuicClientConfig config,
  });

  Future<QuicClient> crateApiBridgeExposeQuicClientType({
    required QuicClient client,
  });

  Future<QuicRecvStream> crateApiBridgeExposeRecvStreamType({
    required QuicRecvStream stream,
  });

  Future<QuicSendStream> crateApiBridgeExposeSendStreamType({
    required QuicSendStream stream,
  });

  Future<void> crateApiBridgeExposeTypesForFrbGeneration();

  Future<(QuicConnection, String?)> crateApiBridgeConnectionCloseReason({
    required QuicConnection connection,
  });

  Future<(QuicConnection, BigInt)>
  crateApiBridgeConnectionDatagramSendBufferSpace({
    required QuicConnection connection,
  });

  Future<(QuicConnection, String?)> crateApiBridgeConnectionLocalIp({
    required QuicConnection connection,
  });

  Future<(QuicConnection, BigInt?)> crateApiBridgeConnectionMaxDatagramSize({
    required QuicConnection connection,
  });

  Future<(QuicConnection, QuicSendStream, QuicRecvStream)>
  crateApiBridgeConnectionOpenBi({required QuicConnection connection});

  Future<(QuicConnection, QuicSendStream)> crateApiBridgeConnectionOpenUni({
    required QuicConnection connection,
  });

  Future<(QuicConnection, Uint8List?)> crateApiBridgeConnectionReadDatagram({
    required QuicConnection connection,
  });

  Future<(QuicConnection, SocketAddress)>
  crateApiBridgeConnectionRemoteAddress({required QuicConnection connection});

  Future<(QuicConnection, BigInt)> crateApiBridgeConnectionRttMillis({
    required QuicConnection connection,
  });

  Future<QuicConnection> crateApiBridgeConnectionSendDatagram({
    required QuicConnection connection,
    required List<int> data,
  });

  Future<QuicConnection> crateApiBridgeConnectionSendDatagramWait({
    required QuicConnection connection,
    required List<int> data,
  });

  Future<(QuicConnection, BigInt)> crateApiBridgeConnectionStableId({
    required QuicConnection connection,
  });

  Future<(QuicConnection, QuicConnectionStats)> crateApiBridgeConnectionStats({
    required QuicConnection connection,
  });

  Future<QuicEndpoint> crateApiBridgeCreateClientEndpoint();

  Future<QuicEndpoint> crateApiBridgeCreateServerEndpoint({
    required QuicServerConfig config,
    required String addr,
  });

  Future<QuicEndpointConfig> crateApiBridgeEndpointConfigNew();

  Future<(QuicEndpoint, QuicConnection)> crateApiBridgeEndpointConnect({
    required QuicEndpoint endpoint,
    required String addr,
    required String serverName,
  });

  Future<void> crateApiBridgeInitApp();

  Future<QuicClient> crateApiBridgeQuicClientClearPool({
    required QuicClient client,
  });

  Future<(QuicClient, QuicClientConfig)> crateApiBridgeQuicClientConfig({
    required QuicClient client,
  });

  Future<QuicClientConfig> crateApiBridgeQuicClientConfigNew();

  Future<QuicClient> crateApiBridgeQuicClientCreate();

  Future<QuicClient> crateApiBridgeQuicClientCreateWithConfig({
    required QuicClientConfig config,
  });

  Future<(QuicClient, String)> crateApiBridgeQuicClientGet({
    required QuicClient client,
    required String url,
  });

  Future<(QuicClient, String)> crateApiBridgeQuicClientGetWithTimeout({
    required QuicClient client,
    required String url,
  });

  Future<(QuicClient, String)> crateApiBridgeQuicClientPost({
    required QuicClient client,
    required String url,
    required String data,
  });

  Future<(QuicClient, String)> crateApiBridgeQuicClientPostWithTimeout({
    required QuicClient client,
    required String url,
    required String data,
  });

  Future<(QuicClient, String)> crateApiBridgeQuicClientSend({
    required QuicClient client,
    required String url,
    required String data,
  });

  Future<(QuicClient, String)> crateApiBridgeQuicClientSendWithTimeout({
    required QuicClient client,
    required String url,
    required String data,
  });

  Future<(QuicRecvStream, Uint8List?)> crateApiBridgeRecvStreamRead({
    required QuicRecvStream stream,
    required BigInt maxLength,
  });

  Future<(QuicRecvStream, Uint8List)> crateApiBridgeRecvStreamReadToEnd({
    required QuicRecvStream stream,
    required BigInt maxLength,
  });

  Future<QuicSendStream> crateApiBridgeSendStreamFinish({
    required QuicSendStream stream,
  });

  Future<(QuicSendStream, BigInt)> crateApiBridgeSendStreamWrite({
    required QuicSendStream stream,
    required List<int> data,
  });

  Future<QuicSendStream> crateApiBridgeSendStreamWriteAll({
    required QuicSendStream stream,
    required List<int> data,
  });

  Future<QuicServerConfig> crateApiBridgeServerConfigWithSingleCert({
    required List<Uint8List> certChain,
    required List<int> key,
  });

  Future<QuicTransportConfig> crateApiBridgeTransportConfigNew();

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_QuicClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_QuicClient;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_QuicClientPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_QuicConnection;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_QuicConnection;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_QuicConnectionPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_QuicEndpoint;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_QuicEndpoint;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_QuicEndpointPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_QuicEndpointConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_QuicEndpointConfig;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_QuicEndpointConfigPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_QuicRecvStream;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_QuicRecvStream;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_QuicRecvStreamPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_QuicSendStream;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_QuicSendStream;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_QuicSendStreamPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_QuicServerConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_QuicServerConfig;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_QuicServerConfigPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_QuicTransportConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_QuicTransportConfig;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_QuicTransportConfigPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<QuicConnection> crateApiBridgeExposeConnectionType({
    required QuicConnection connection,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
            connection,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeExposeConnectionTypeConstMeta,
        argValues: [connection],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeExposeConnectionTypeConstMeta =>
      const TaskConstMeta(
        debugName: "_expose_connection_type",
        argNames: ["connection"],
      );

  @override
  Future<QuicClientConfig> crateApiBridgeExposeQuicClientConfigType({
    required QuicClientConfig config,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_quic_client_config(config, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_quic_client_config,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeExposeQuicClientConfigTypeConstMeta,
        argValues: [config],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeExposeQuicClientConfigTypeConstMeta =>
      const TaskConstMeta(
        debugName: "_expose_quic_client_config_type",
        argNames: ["config"],
      );

  @override
  Future<QuicClient> crateApiBridgeExposeQuicClientType({
    required QuicClient client,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
            client,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeExposeQuicClientTypeConstMeta,
        argValues: [client],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeExposeQuicClientTypeConstMeta =>
      const TaskConstMeta(
        debugName: "_expose_quic_client_type",
        argNames: ["client"],
      );

  @override
  Future<QuicRecvStream> crateApiBridgeExposeRecvStreamType({
    required QuicRecvStream stream,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream(
            stream,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeExposeRecvStreamTypeConstMeta,
        argValues: [stream],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeExposeRecvStreamTypeConstMeta =>
      const TaskConstMeta(
        debugName: "_expose_recv_stream_type",
        argNames: ["stream"],
      );

  @override
  Future<QuicSendStream> crateApiBridgeExposeSendStreamType({
    required QuicSendStream stream,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
            stream,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeExposeSendStreamTypeConstMeta,
        argValues: [stream],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeExposeSendStreamTypeConstMeta =>
      const TaskConstMeta(
        debugName: "_expose_send_stream_type",
        argNames: ["stream"],
      );

  @override
  Future<void> crateApiBridgeExposeTypesForFrbGeneration() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeExposeTypesForFrbGenerationConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeExposeTypesForFrbGenerationConstMeta =>
      const TaskConstMeta(
        debugName: "_expose_types_for_frb_generation",
        argNames: [],
      );

  @override
  Future<(QuicConnection, String?)> crateApiBridgeConnectionCloseReason({
    required QuicConnection connection,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
            connection,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_opt_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeConnectionCloseReasonConstMeta,
        argValues: [connection],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeConnectionCloseReasonConstMeta =>
      const TaskConstMeta(
        debugName: "connection_close_reason",
        argNames: ["connection"],
      );

  @override
  Future<(QuicConnection, BigInt)>
  crateApiBridgeConnectionDatagramSendBufferSpace({
    required QuicConnection connection,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
            connection,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_usize,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeConnectionDatagramSendBufferSpaceConstMeta,
        argValues: [connection],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeConnectionDatagramSendBufferSpaceConstMeta =>
      const TaskConstMeta(
        debugName: "connection_datagram_send_buffer_space",
        argNames: ["connection"],
      );

  @override
  Future<(QuicConnection, String?)> crateApiBridgeConnectionLocalIp({
    required QuicConnection connection,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
            connection,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_opt_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeConnectionLocalIpConstMeta,
        argValues: [connection],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeConnectionLocalIpConstMeta =>
      const TaskConstMeta(
        debugName: "connection_local_ip",
        argNames: ["connection"],
      );

  @override
  Future<(QuicConnection, BigInt?)> crateApiBridgeConnectionMaxDatagramSize({
    required QuicConnection connection,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
            connection,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_opt_box_autoadd_usize,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeConnectionMaxDatagramSizeConstMeta,
        argValues: [connection],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeConnectionMaxDatagramSizeConstMeta =>
      const TaskConstMeta(
        debugName: "connection_max_datagram_size",
        argNames: ["connection"],
      );

  @override
  Future<(QuicConnection, QuicSendStream, QuicRecvStream)>
  crateApiBridgeConnectionOpenBi({required QuicConnection connection}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
            connection,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_send_stream_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_recv_stream,
          decodeErrorData: sse_decode_quic_error,
        ),
        constMeta: kCrateApiBridgeConnectionOpenBiConstMeta,
        argValues: [connection],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeConnectionOpenBiConstMeta =>
      const TaskConstMeta(
        debugName: "connection_open_bi",
        argNames: ["connection"],
      );

  @override
  Future<(QuicConnection, QuicSendStream)> crateApiBridgeConnectionOpenUni({
    required QuicConnection connection,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
            connection,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_send_stream,
          decodeErrorData: sse_decode_quic_error,
        ),
        constMeta: kCrateApiBridgeConnectionOpenUniConstMeta,
        argValues: [connection],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeConnectionOpenUniConstMeta =>
      const TaskConstMeta(
        debugName: "connection_open_uni",
        argNames: ["connection"],
      );

  @override
  Future<(QuicConnection, Uint8List?)> crateApiBridgeConnectionReadDatagram({
    required QuicConnection connection,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
            connection,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_opt_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeConnectionReadDatagramConstMeta,
        argValues: [connection],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeConnectionReadDatagramConstMeta =>
      const TaskConstMeta(
        debugName: "connection_read_datagram",
        argNames: ["connection"],
      );

  @override
  Future<(QuicConnection, SocketAddress)>
  crateApiBridgeConnectionRemoteAddress({required QuicConnection connection}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
            connection,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_socket_address,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeConnectionRemoteAddressConstMeta,
        argValues: [connection],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeConnectionRemoteAddressConstMeta =>
      const TaskConstMeta(
        debugName: "connection_remote_address",
        argNames: ["connection"],
      );

  @override
  Future<(QuicConnection, BigInt)> crateApiBridgeConnectionRttMillis({
    required QuicConnection connection,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
            connection,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_u_64,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeConnectionRttMillisConstMeta,
        argValues: [connection],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeConnectionRttMillisConstMeta =>
      const TaskConstMeta(
        debugName: "connection_rtt_millis",
        argNames: ["connection"],
      );

  @override
  Future<QuicConnection> crateApiBridgeConnectionSendDatagram({
    required QuicConnection connection,
    required List<int> data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
            connection,
            serializer,
          );
          sse_encode_list_prim_u_8_loose(data, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection,
          decodeErrorData: sse_decode_quic_datagram_exception,
        ),
        constMeta: kCrateApiBridgeConnectionSendDatagramConstMeta,
        argValues: [connection, data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeConnectionSendDatagramConstMeta =>
      const TaskConstMeta(
        debugName: "connection_send_datagram",
        argNames: ["connection", "data"],
      );

  @override
  Future<QuicConnection> crateApiBridgeConnectionSendDatagramWait({
    required QuicConnection connection,
    required List<int> data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
            connection,
            serializer,
          );
          sse_encode_list_prim_u_8_loose(data, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection,
          decodeErrorData: sse_decode_quic_datagram_exception,
        ),
        constMeta: kCrateApiBridgeConnectionSendDatagramWaitConstMeta,
        argValues: [connection, data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeConnectionSendDatagramWaitConstMeta =>
      const TaskConstMeta(
        debugName: "connection_send_datagram_wait",
        argNames: ["connection", "data"],
      );

  @override
  Future<(QuicConnection, BigInt)> crateApiBridgeConnectionStableId({
    required QuicConnection connection,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
            connection,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_usize,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeConnectionStableIdConstMeta,
        argValues: [connection],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeConnectionStableIdConstMeta =>
      const TaskConstMeta(
        debugName: "connection_stable_id",
        argNames: ["connection"],
      );

  @override
  Future<(QuicConnection, QuicConnectionStats)> crateApiBridgeConnectionStats({
    required QuicConnection connection,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
            connection,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_quic_connection_stats,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeConnectionStatsConstMeta,
        argValues: [connection],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeConnectionStatsConstMeta =>
      const TaskConstMeta(
        debugName: "connection_stats",
        argNames: ["connection"],
      );

  @override
  Future<QuicEndpoint> crateApiBridgeCreateClientEndpoint() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpoint,
          decodeErrorData: sse_decode_quic_error,
        ),
        constMeta: kCrateApiBridgeCreateClientEndpointConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeCreateClientEndpointConstMeta =>
      const TaskConstMeta(debugName: "create_client_endpoint", argNames: []);

  @override
  Future<QuicEndpoint> crateApiBridgeCreateServerEndpoint({
    required QuicServerConfig config,
    required String addr,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicServerConfig(
            config,
            serializer,
          );
          sse_encode_String(addr, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpoint,
          decodeErrorData: sse_decode_quic_error,
        ),
        constMeta: kCrateApiBridgeCreateServerEndpointConstMeta,
        argValues: [config, addr],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeCreateServerEndpointConstMeta =>
      const TaskConstMeta(
        debugName: "create_server_endpoint",
        argNames: ["config", "addr"],
      );

  @override
  Future<QuicEndpointConfig> crateApiBridgeEndpointConfigNew() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpointConfig,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeEndpointConfigNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeEndpointConfigNewConstMeta =>
      const TaskConstMeta(debugName: "endpoint_config_new", argNames: []);

  @override
  Future<(QuicEndpoint, QuicConnection)> crateApiBridgeEndpointConnect({
    required QuicEndpoint endpoint,
    required String addr,
    required String serverName,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpoint(
            endpoint,
            serializer,
          );
          sse_encode_String(addr, serializer);
          sse_encode_String(serverName, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_endpoint_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection,
          decodeErrorData: sse_decode_quic_error,
        ),
        constMeta: kCrateApiBridgeEndpointConnectConstMeta,
        argValues: [endpoint, addr, serverName],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeEndpointConnectConstMeta =>
      const TaskConstMeta(
        debugName: "endpoint_connect",
        argNames: ["endpoint", "addr", "serverName"],
      );

  @override
  Future<void> crateApiBridgeInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Future<QuicClient> crateApiBridgeQuicClientClearPool({
    required QuicClient client,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
            client,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeQuicClientClearPoolConstMeta,
        argValues: [client],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeQuicClientClearPoolConstMeta =>
      const TaskConstMeta(
        debugName: "quic_client_clear_pool",
        argNames: ["client"],
      );

  @override
  Future<(QuicClient, QuicClientConfig)> crateApiBridgeQuicClientConfig({
    required QuicClient client,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
            client,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_client_quic_client_config,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeQuicClientConfigConstMeta,
        argValues: [client],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeQuicClientConfigConstMeta =>
      const TaskConstMeta(
        debugName: "quic_client_config",
        argNames: ["client"],
      );

  @override
  Future<QuicClientConfig> crateApiBridgeQuicClientConfigNew() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_quic_client_config,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeQuicClientConfigNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeQuicClientConfigNewConstMeta =>
      const TaskConstMeta(debugName: "quic_client_config_new", argNames: []);

  @override
  Future<QuicClient> crateApiBridgeQuicClientCreate() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient,
          decodeErrorData: sse_decode_quic_error,
        ),
        constMeta: kCrateApiBridgeQuicClientCreateConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeQuicClientCreateConstMeta =>
      const TaskConstMeta(debugName: "quic_client_create", argNames: []);

  @override
  Future<QuicClient> crateApiBridgeQuicClientCreateWithConfig({
    required QuicClientConfig config,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_quic_client_config(config, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 29,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient,
          decodeErrorData: sse_decode_quic_error,
        ),
        constMeta: kCrateApiBridgeQuicClientCreateWithConfigConstMeta,
        argValues: [config],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeQuicClientCreateWithConfigConstMeta =>
      const TaskConstMeta(
        debugName: "quic_client_create_with_config",
        argNames: ["config"],
      );

  @override
  Future<(QuicClient, String)> crateApiBridgeQuicClientGet({
    required QuicClient client,
    required String url,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
            client,
            serializer,
          );
          sse_encode_String(url, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 30,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_client_string,
          decodeErrorData: sse_decode_quic_error,
        ),
        constMeta: kCrateApiBridgeQuicClientGetConstMeta,
        argValues: [client, url],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeQuicClientGetConstMeta =>
      const TaskConstMeta(
        debugName: "quic_client_get",
        argNames: ["client", "url"],
      );

  @override
  Future<(QuicClient, String)> crateApiBridgeQuicClientGetWithTimeout({
    required QuicClient client,
    required String url,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
            client,
            serializer,
          );
          sse_encode_String(url, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 31,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_client_string,
          decodeErrorData: sse_decode_quic_error,
        ),
        constMeta: kCrateApiBridgeQuicClientGetWithTimeoutConstMeta,
        argValues: [client, url],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeQuicClientGetWithTimeoutConstMeta =>
      const TaskConstMeta(
        debugName: "quic_client_get_with_timeout",
        argNames: ["client", "url"],
      );

  @override
  Future<(QuicClient, String)> crateApiBridgeQuicClientPost({
    required QuicClient client,
    required String url,
    required String data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
            client,
            serializer,
          );
          sse_encode_String(url, serializer);
          sse_encode_String(data, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 32,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_client_string,
          decodeErrorData: sse_decode_quic_error,
        ),
        constMeta: kCrateApiBridgeQuicClientPostConstMeta,
        argValues: [client, url, data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeQuicClientPostConstMeta =>
      const TaskConstMeta(
        debugName: "quic_client_post",
        argNames: ["client", "url", "data"],
      );

  @override
  Future<(QuicClient, String)> crateApiBridgeQuicClientPostWithTimeout({
    required QuicClient client,
    required String url,
    required String data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
            client,
            serializer,
          );
          sse_encode_String(url, serializer);
          sse_encode_String(data, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 33,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_client_string,
          decodeErrorData: sse_decode_quic_error,
        ),
        constMeta: kCrateApiBridgeQuicClientPostWithTimeoutConstMeta,
        argValues: [client, url, data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeQuicClientPostWithTimeoutConstMeta =>
      const TaskConstMeta(
        debugName: "quic_client_post_with_timeout",
        argNames: ["client", "url", "data"],
      );

  @override
  Future<(QuicClient, String)> crateApiBridgeQuicClientSend({
    required QuicClient client,
    required String url,
    required String data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
            client,
            serializer,
          );
          sse_encode_String(url, serializer);
          sse_encode_String(data, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 34,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_client_string,
          decodeErrorData: sse_decode_quic_error,
        ),
        constMeta: kCrateApiBridgeQuicClientSendConstMeta,
        argValues: [client, url, data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeQuicClientSendConstMeta =>
      const TaskConstMeta(
        debugName: "quic_client_send",
        argNames: ["client", "url", "data"],
      );

  @override
  Future<(QuicClient, String)> crateApiBridgeQuicClientSendWithTimeout({
    required QuicClient client,
    required String url,
    required String data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
            client,
            serializer,
          );
          sse_encode_String(url, serializer);
          sse_encode_String(data, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 35,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_client_string,
          decodeErrorData: sse_decode_quic_error,
        ),
        constMeta: kCrateApiBridgeQuicClientSendWithTimeoutConstMeta,
        argValues: [client, url, data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeQuicClientSendWithTimeoutConstMeta =>
      const TaskConstMeta(
        debugName: "quic_client_send_with_timeout",
        argNames: ["client", "url", "data"],
      );

  @override
  Future<(QuicRecvStream, Uint8List?)> crateApiBridgeRecvStreamRead({
    required QuicRecvStream stream,
    required BigInt maxLength,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream(
            stream,
            serializer,
          );
          sse_encode_usize(maxLength, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 36,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_recv_stream_opt_list_prim_u_8_strict,
          decodeErrorData: sse_decode_quic_read_exception,
        ),
        constMeta: kCrateApiBridgeRecvStreamReadConstMeta,
        argValues: [stream, maxLength],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeRecvStreamReadConstMeta =>
      const TaskConstMeta(
        debugName: "recv_stream_read",
        argNames: ["stream", "maxLength"],
      );

  @override
  Future<(QuicRecvStream, Uint8List)> crateApiBridgeRecvStreamReadToEnd({
    required QuicRecvStream stream,
    required BigInt maxLength,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream(
            stream,
            serializer,
          );
          sse_encode_usize(maxLength, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 37,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_recv_stream_list_prim_u_8_strict,
          decodeErrorData: sse_decode_quic_read_to_end_exception,
        ),
        constMeta: kCrateApiBridgeRecvStreamReadToEndConstMeta,
        argValues: [stream, maxLength],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeRecvStreamReadToEndConstMeta =>
      const TaskConstMeta(
        debugName: "recv_stream_read_to_end",
        argNames: ["stream", "maxLength"],
      );

  @override
  Future<QuicSendStream> crateApiBridgeSendStreamFinish({
    required QuicSendStream stream,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
            stream,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 38,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream,
          decodeErrorData: sse_decode_quic_write_exception,
        ),
        constMeta: kCrateApiBridgeSendStreamFinishConstMeta,
        argValues: [stream],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeSendStreamFinishConstMeta =>
      const TaskConstMeta(
        debugName: "send_stream_finish",
        argNames: ["stream"],
      );

  @override
  Future<(QuicSendStream, BigInt)> crateApiBridgeSendStreamWrite({
    required QuicSendStream stream,
    required List<int> data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
            stream,
            serializer,
          );
          sse_encode_list_prim_u_8_loose(data, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 39,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_send_stream_usize,
          decodeErrorData: sse_decode_quic_write_exception,
        ),
        constMeta: kCrateApiBridgeSendStreamWriteConstMeta,
        argValues: [stream, data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeSendStreamWriteConstMeta =>
      const TaskConstMeta(
        debugName: "send_stream_write",
        argNames: ["stream", "data"],
      );

  @override
  Future<QuicSendStream> crateApiBridgeSendStreamWriteAll({
    required QuicSendStream stream,
    required List<int> data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
            stream,
            serializer,
          );
          sse_encode_list_prim_u_8_loose(data, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 40,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream,
          decodeErrorData: sse_decode_quic_write_exception,
        ),
        constMeta: kCrateApiBridgeSendStreamWriteAllConstMeta,
        argValues: [stream, data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeSendStreamWriteAllConstMeta =>
      const TaskConstMeta(
        debugName: "send_stream_write_all",
        argNames: ["stream", "data"],
      );

  @override
  Future<QuicServerConfig> crateApiBridgeServerConfigWithSingleCert({
    required List<Uint8List> certChain,
    required List<int> key,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_list_prim_u_8_strict(certChain, serializer);
          sse_encode_list_prim_u_8_loose(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 41,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicServerConfig,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiBridgeServerConfigWithSingleCertConstMeta,
        argValues: [certChain, key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeServerConfigWithSingleCertConstMeta =>
      const TaskConstMeta(
        debugName: "server_config_with_single_cert",
        argNames: ["certChain", "key"],
      );

  @override
  Future<QuicTransportConfig> crateApiBridgeTransportConfigNew() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 42,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicTransportConfig,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeTransportConfigNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeTransportConfigNewConstMeta =>
      const TaskConstMeta(debugName: "transport_config_new", argNames: []);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_QuicClient => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_QuicClient => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_QuicConnection => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_QuicConnection => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_QuicEndpoint => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpoint;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_QuicEndpoint => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpoint;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_QuicEndpointConfig => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpointConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_QuicEndpointConfig => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpointConfig;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_QuicRecvStream => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_QuicRecvStream => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_QuicSendStream => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_QuicSendStream => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_QuicServerConfig => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicServerConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_QuicServerConfig => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicServerConfig;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_QuicTransportConfig => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicTransportConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_QuicTransportConfig => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicTransportConfig;

  @protected
  QuicClient
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuicClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QuicConnection
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuicConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QuicEndpoint
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpoint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuicEndpointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QuicEndpointConfig
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpointConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuicEndpointConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QuicRecvStream
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuicRecvStreamImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QuicSendStream
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuicSendStreamImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QuicServerConfig
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicServerConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuicServerConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QuicTransportConfig
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicTransportConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuicTransportConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QuicClient
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuicClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QuicConnection
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuicConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QuicEndpoint
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpoint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuicEndpointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QuicEndpointConfig
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpointConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuicEndpointConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QuicRecvStream
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuicRecvStreamImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QuicSendStream
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuicSendStreamImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QuicServerConfig
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicServerConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuicServerConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QuicTransportConfig
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicTransportConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuicTransportConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  QuicClientConfig dco_decode_box_autoadd_quic_client_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_quic_client_config(raw);
  }

  @protected
  QuicReadException dco_decode_box_autoadd_quic_read_exception(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_quic_read_exception(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_usize(raw);
  }

  @protected
  List<Uint8List> dco_decode_list_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_list_prim_u_8_strict).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  QuicClientConfig dco_decode_quic_client_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return QuicClientConfig(
      maxConnectionsPerHost: dco_decode_usize(arr[0]),
      connectTimeoutMs: dco_decode_u_64(arr[1]),
      requestTimeoutMs: dco_decode_u_64(arr[2]),
      retryAttempts: dco_decode_u_32(arr[3]),
      retryDelayMs: dco_decode_u_64(arr[4]),
      keepAliveTimeoutMs: dco_decode_u_64(arr[5]),
    );
  }

  @protected
  QuicConnectionStats dco_decode_quic_connection_stats(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return QuicConnectionStats(
      path: dco_decode_quic_path_stats(arr[0]),
      frameTx: dco_decode_quic_frame_stats(arr[1]),
      frameRx: dco_decode_quic_frame_stats(arr[2]),
      udpTx: dco_decode_quic_udp_stats(arr[3]),
      udpRx: dco_decode_quic_udp_stats(arr[4]),
    );
  }

  @protected
  QuicDatagramException dco_decode_quic_datagram_exception(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return QuicDatagramException_UnsupportedByPeer();
      case 1:
        return QuicDatagramException_TooLarge(
          maxSize: dco_decode_usize(raw[1]),
        );
      case 2:
        return QuicDatagramException_ConnectionLost(dco_decode_String(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  QuicError dco_decode_quic_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return QuicError_Connection(dco_decode_String(raw[1]));
      case 1:
        return QuicError_Endpoint(dco_decode_String(raw[1]));
      case 2:
        return QuicError_Stream(dco_decode_String(raw[1]));
      case 3:
        return QuicError_Tls(dco_decode_String(raw[1]));
      case 4:
        return QuicError_Config(dco_decode_String(raw[1]));
      case 5:
        return QuicError_Network(dco_decode_String(raw[1]));
      case 6:
        return QuicError_Write(dco_decode_String(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  QuicFrameStats dco_decode_quic_frame_stats(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 22)
      throw Exception('unexpected arr length: expect 22 but see ${arr.length}');
    return QuicFrameStats(
      acks: dco_decode_u_64(arr[0]),
      crypto: dco_decode_u_64(arr[1]),
      connectionClose: dco_decode_u_64(arr[2]),
      dataBlocked: dco_decode_u_64(arr[3]),
      datagram: dco_decode_u_64(arr[4]),
      handshakeDone: dco_decode_u_64(arr[5]),
      maxData: dco_decode_u_64(arr[6]),
      maxStreamData: dco_decode_u_64(arr[7]),
      maxStreamsBidi: dco_decode_u_64(arr[8]),
      maxStreamsUni: dco_decode_u_64(arr[9]),
      newConnectionId: dco_decode_u_64(arr[10]),
      newToken: dco_decode_u_64(arr[11]),
      pathChallenge: dco_decode_u_64(arr[12]),
      pathResponse: dco_decode_u_64(arr[13]),
      ping: dco_decode_u_64(arr[14]),
      resetStream: dco_decode_u_64(arr[15]),
      retireConnectionId: dco_decode_u_64(arr[16]),
      stream: dco_decode_u_64(arr[17]),
      streamDataBlocked: dco_decode_u_64(arr[18]),
      streamsBlockedBidi: dco_decode_u_64(arr[19]),
      streamsBlockedUni: dco_decode_u_64(arr[20]),
      stopSending: dco_decode_u_64(arr[21]),
    );
  }

  @protected
  QuicPathStats dco_decode_quic_path_stats(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return QuicPathStats(
      rttMillis: dco_decode_u_64(arr[0]),
      cwnd: dco_decode_u_64(arr[1]),
      lostPackets: dco_decode_u_64(arr[2]),
      lostBytes: dco_decode_u_64(arr[3]),
      sentPackets: dco_decode_u_64(arr[4]),
      congestionEvents: dco_decode_u_64(arr[5]),
    );
  }

  @protected
  QuicReadException dco_decode_quic_read_exception(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return QuicReadException_Reset(dco_decode_u_64(raw[1]));
      case 1:
        return QuicReadException_ConnectionLost(dco_decode_String(raw[1]));
      case 2:
        return QuicReadException_ZeroRttRejected();
      case 3:
        return QuicReadException_ClosedStream();
      case 4:
        return QuicReadException_IllegalOrderedRead();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  QuicReadToEndException dco_decode_quic_read_to_end_exception(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return QuicReadToEndException_Read(
          dco_decode_box_autoadd_quic_read_exception(raw[1]),
        );
      case 1:
        return QuicReadToEndException_TooLong();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  QuicUdpStats dco_decode_quic_udp_stats(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return QuicUdpStats(
      datagrams: dco_decode_u_64(arr[0]),
      bytes: dco_decode_u_64(arr[1]),
      ios: dco_decode_u_64(arr[2]),
    );
  }

  @protected
  QuicWriteException dco_decode_quic_write_exception(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return QuicWriteException_Stopped(dco_decode_u_64(raw[1]));
      case 1:
        return QuicWriteException_ConnectionLost(dco_decode_String(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  (QuicClient, QuicClientConfig)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_client_quic_client_config(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
        arr[0],
      ),
      dco_decode_quic_client_config(arr[1]),
    );
  }

  @protected
  (QuicClient, String)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_client_string(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
        arr[0],
      ),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (QuicConnection, QuicSendStream)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_send_stream(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
        arr[0],
      ),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
        arr[1],
      ),
    );
  }

  @protected
  (QuicConnection, QuicSendStream, QuicRecvStream)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_send_stream_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_recv_stream(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
        arr[0],
      ),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
        arr[1],
      ),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream(
        arr[2],
      ),
    );
  }

  @protected
  (QuicConnection, BigInt?)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_opt_box_autoadd_usize(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
        arr[0],
      ),
      dco_decode_opt_box_autoadd_usize(arr[1]),
    );
  }

  @protected
  (QuicConnection, Uint8List?)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_opt_list_prim_u_8_strict(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
        arr[0],
      ),
      dco_decode_opt_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  (QuicConnection, String?)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_opt_string(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
        arr[0],
      ),
      dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  (QuicConnection, QuicConnectionStats)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_quic_connection_stats(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
        arr[0],
      ),
      dco_decode_quic_connection_stats(arr[1]),
    );
  }

  @protected
  (QuicConnection, SocketAddress)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_socket_address(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
        arr[0],
      ),
      dco_decode_socket_address(arr[1]),
    );
  }

  @protected
  (QuicConnection, BigInt)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_u_64(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
        arr[0],
      ),
      dco_decode_u_64(arr[1]),
    );
  }

  @protected
  (QuicConnection, BigInt)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_usize(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
        arr[0],
      ),
      dco_decode_usize(arr[1]),
    );
  }

  @protected
  (QuicEndpoint, QuicConnection)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_endpoint_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpoint(
        arr[0],
      ),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
        arr[1],
      ),
    );
  }

  @protected
  (QuicRecvStream, Uint8List)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_recv_stream_list_prim_u_8_strict(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream(
        arr[0],
      ),
      dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  (QuicRecvStream, Uint8List?)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_recv_stream_opt_list_prim_u_8_strict(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream(
        arr[0],
      ),
      dco_decode_opt_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  (QuicSendStream, BigInt)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_send_stream_usize(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
        arr[0],
      ),
      dco_decode_usize(arr[1]),
    );
  }

  @protected
  SocketAddress dco_decode_socket_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SocketAddress(
      ip: dco_decode_String(arr[0]),
      port: dco_decode_u_16(arr[1]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  QuicClient
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuicClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  QuicConnection
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuicConnectionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  QuicEndpoint
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpoint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuicEndpointImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  QuicEndpointConfig
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpointConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuicEndpointConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  QuicRecvStream
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuicRecvStreamImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  QuicSendStream
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuicSendStreamImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  QuicServerConfig
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicServerConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuicServerConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  QuicTransportConfig
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicTransportConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuicTransportConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  QuicClient
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuicClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  QuicConnection
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuicConnectionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  QuicEndpoint
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpoint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuicEndpointImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  QuicEndpointConfig
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpointConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuicEndpointConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  QuicRecvStream
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuicRecvStreamImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  QuicSendStream
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuicSendStreamImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  QuicServerConfig
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicServerConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuicServerConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  QuicTransportConfig
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicTransportConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuicTransportConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  QuicClientConfig sse_decode_box_autoadd_quic_client_config(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_quic_client_config(deserializer));
  }

  @protected
  QuicReadException sse_decode_box_autoadd_quic_read_exception(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_quic_read_exception(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_usize(deserializer));
  }

  @protected
  List<Uint8List> sse_decode_list_list_prim_u_8_strict(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Uint8List>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_prim_u_8_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  QuicClientConfig sse_decode_quic_client_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_maxConnectionsPerHost = sse_decode_usize(deserializer);
    var var_connectTimeoutMs = sse_decode_u_64(deserializer);
    var var_requestTimeoutMs = sse_decode_u_64(deserializer);
    var var_retryAttempts = sse_decode_u_32(deserializer);
    var var_retryDelayMs = sse_decode_u_64(deserializer);
    var var_keepAliveTimeoutMs = sse_decode_u_64(deserializer);
    return QuicClientConfig(
      maxConnectionsPerHost: var_maxConnectionsPerHost,
      connectTimeoutMs: var_connectTimeoutMs,
      requestTimeoutMs: var_requestTimeoutMs,
      retryAttempts: var_retryAttempts,
      retryDelayMs: var_retryDelayMs,
      keepAliveTimeoutMs: var_keepAliveTimeoutMs,
    );
  }

  @protected
  QuicConnectionStats sse_decode_quic_connection_stats(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_path = sse_decode_quic_path_stats(deserializer);
    var var_frameTx = sse_decode_quic_frame_stats(deserializer);
    var var_frameRx = sse_decode_quic_frame_stats(deserializer);
    var var_udpTx = sse_decode_quic_udp_stats(deserializer);
    var var_udpRx = sse_decode_quic_udp_stats(deserializer);
    return QuicConnectionStats(
      path: var_path,
      frameTx: var_frameTx,
      frameRx: var_frameRx,
      udpTx: var_udpTx,
      udpRx: var_udpRx,
    );
  }

  @protected
  QuicDatagramException sse_decode_quic_datagram_exception(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return QuicDatagramException_UnsupportedByPeer();
      case 1:
        var var_maxSize = sse_decode_usize(deserializer);
        return QuicDatagramException_TooLarge(maxSize: var_maxSize);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return QuicDatagramException_ConnectionLost(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  QuicError sse_decode_quic_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return QuicError_Connection(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return QuicError_Endpoint(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return QuicError_Stream(var_field0);
      case 3:
        var var_field0 = sse_decode_String(deserializer);
        return QuicError_Tls(var_field0);
      case 4:
        var var_field0 = sse_decode_String(deserializer);
        return QuicError_Config(var_field0);
      case 5:
        var var_field0 = sse_decode_String(deserializer);
        return QuicError_Network(var_field0);
      case 6:
        var var_field0 = sse_decode_String(deserializer);
        return QuicError_Write(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  QuicFrameStats sse_decode_quic_frame_stats(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_acks = sse_decode_u_64(deserializer);
    var var_crypto = sse_decode_u_64(deserializer);
    var var_connectionClose = sse_decode_u_64(deserializer);
    var var_dataBlocked = sse_decode_u_64(deserializer);
    var var_datagram = sse_decode_u_64(deserializer);
    var var_handshakeDone = sse_decode_u_64(deserializer);
    var var_maxData = sse_decode_u_64(deserializer);
    var var_maxStreamData = sse_decode_u_64(deserializer);
    var var_maxStreamsBidi = sse_decode_u_64(deserializer);
    var var_maxStreamsUni = sse_decode_u_64(deserializer);
    var var_newConnectionId = sse_decode_u_64(deserializer);
    var var_newToken = sse_decode_u_64(deserializer);
    var var_pathChallenge = sse_decode_u_64(deserializer);
    var var_pathResponse = sse_decode_u_64(deserializer);
    var var_ping = sse_decode_u_64(deserializer);
    var var_resetStream = sse_decode_u_64(deserializer);
    var var_retireConnectionId = sse_decode_u_64(deserializer);
    var var_stream = sse_decode_u_64(deserializer);
    var var_streamDataBlocked = sse_decode_u_64(deserializer);
    var var_streamsBlockedBidi = sse_decode_u_64(deserializer);
    var var_streamsBlockedUni = sse_decode_u_64(deserializer);
    var var_stopSending = sse_decode_u_64(deserializer);
    return QuicFrameStats(
      acks: var_acks,
      crypto: var_crypto,
      connectionClose: var_connectionClose,
      dataBlocked: var_dataBlocked,
      datagram: var_datagram,
      handshakeDone: var_handshakeDone,
      maxData: var_maxData,
      maxStreamData: var_maxStreamData,
      maxStreamsBidi: var_maxStreamsBidi,
      maxStreamsUni: var_maxStreamsUni,
      newConnectionId: var_newConnectionId,
      newToken: var_newToken,
      pathChallenge: var_pathChallenge,
      pathResponse: var_pathResponse,
      ping: var_ping,
      resetStream: var_resetStream,
      retireConnectionId: var_retireConnectionId,
      stream: var_stream,
      streamDataBlocked: var_streamDataBlocked,
      streamsBlockedBidi: var_streamsBlockedBidi,
      streamsBlockedUni: var_streamsBlockedUni,
      stopSending: var_stopSending,
    );
  }

  @protected
  QuicPathStats sse_decode_quic_path_stats(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_rttMillis = sse_decode_u_64(deserializer);
    var var_cwnd = sse_decode_u_64(deserializer);
    var var_lostPackets = sse_decode_u_64(deserializer);
    var var_lostBytes = sse_decode_u_64(deserializer);
    var var_sentPackets = sse_decode_u_64(deserializer);
    var var_congestionEvents = sse_decode_u_64(deserializer);
    return QuicPathStats(
      rttMillis: var_rttMillis,
      cwnd: var_cwnd,
      lostPackets: var_lostPackets,
      lostBytes: var_lostBytes,
      sentPackets: var_sentPackets,
      congestionEvents: var_congestionEvents,
    );
  }

  @protected
  QuicReadException sse_decode_quic_read_exception(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_u_64(deserializer);
        return QuicReadException_Reset(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return QuicReadException_ConnectionLost(var_field0);
      case 2:
        return QuicReadException_ZeroRttRejected();
      case 3:
        return QuicReadException_ClosedStream();
      case 4:
        return QuicReadException_IllegalOrderedRead();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  QuicReadToEndException sse_decode_quic_read_to_end_exception(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_quic_read_exception(
          deserializer,
        );
        return QuicReadToEndException_Read(var_field0);
      case 1:
        return QuicReadToEndException_TooLong();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  QuicUdpStats sse_decode_quic_udp_stats(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_datagrams = sse_decode_u_64(deserializer);
    var var_bytes = sse_decode_u_64(deserializer);
    var var_ios = sse_decode_u_64(deserializer);
    return QuicUdpStats(
      datagrams: var_datagrams,
      bytes: var_bytes,
      ios: var_ios,
    );
  }

  @protected
  QuicWriteException sse_decode_quic_write_exception(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_u_64(deserializer);
        return QuicWriteException_Stopped(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return QuicWriteException_ConnectionLost(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  (QuicClient, QuicClientConfig)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_client_quic_client_config(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
          deserializer,
        );
    var var_field1 = sse_decode_quic_client_config(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (QuicClient, String)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_client_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
          deserializer,
        );
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (QuicConnection, QuicSendStream)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_send_stream(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
          deserializer,
        );
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
          deserializer,
        );
    return (var_field0, var_field1);
  }

  @protected
  (QuicConnection, QuicSendStream, QuicRecvStream)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_send_stream_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_recv_stream(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
          deserializer,
        );
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
          deserializer,
        );
    var var_field2 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream(
          deserializer,
        );
    return (var_field0, var_field1, var_field2);
  }

  @protected
  (QuicConnection, BigInt?)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_opt_box_autoadd_usize(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
          deserializer,
        );
    var var_field1 = sse_decode_opt_box_autoadd_usize(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (QuicConnection, Uint8List?)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_opt_list_prim_u_8_strict(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
          deserializer,
        );
    var var_field1 = sse_decode_opt_list_prim_u_8_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (QuicConnection, String?)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_opt_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
          deserializer,
        );
    var var_field1 = sse_decode_opt_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (QuicConnection, QuicConnectionStats)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_quic_connection_stats(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
          deserializer,
        );
    var var_field1 = sse_decode_quic_connection_stats(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (QuicConnection, SocketAddress)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_socket_address(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
          deserializer,
        );
    var var_field1 = sse_decode_socket_address(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (QuicConnection, BigInt)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_u_64(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
          deserializer,
        );
    var var_field1 = sse_decode_u_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (QuicConnection, BigInt)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_usize(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
          deserializer,
        );
    var var_field1 = sse_decode_usize(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (QuicEndpoint, QuicConnection)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_endpoint_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpoint(
          deserializer,
        );
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
          deserializer,
        );
    return (var_field0, var_field1);
  }

  @protected
  (QuicRecvStream, Uint8List)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_recv_stream_list_prim_u_8_strict(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream(
          deserializer,
        );
    var var_field1 = sse_decode_list_prim_u_8_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (QuicRecvStream, Uint8List?)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_recv_stream_opt_list_prim_u_8_strict(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream(
          deserializer,
        );
    var var_field1 = sse_decode_opt_list_prim_u_8_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (QuicSendStream, BigInt)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_send_stream_usize(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
          deserializer,
        );
    var var_field1 = sse_decode_usize(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  SocketAddress sse_decode_socket_address(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_ip = sse_decode_String(deserializer);
    var var_port = sse_decode_u_16(deserializer);
    return SocketAddress(ip: var_ip, port: var_port);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
    QuicClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as QuicClientImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
    QuicConnection self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as QuicConnectionImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpoint(
    QuicEndpoint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as QuicEndpointImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpointConfig(
    QuicEndpointConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as QuicEndpointConfigImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream(
    QuicRecvStream self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as QuicRecvStreamImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
    QuicSendStream self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as QuicSendStreamImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicServerConfig(
    QuicServerConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as QuicServerConfigImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicTransportConfig(
    QuicTransportConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as QuicTransportConfigImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
    QuicClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as QuicClientImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
    QuicConnection self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as QuicConnectionImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpoint(
    QuicEndpoint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as QuicEndpointImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpointConfig(
    QuicEndpointConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as QuicEndpointConfigImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream(
    QuicRecvStream self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as QuicRecvStreamImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
    QuicSendStream self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as QuicSendStreamImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicServerConfig(
    QuicServerConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as QuicServerConfigImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicTransportConfig(
    QuicTransportConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as QuicTransportConfigImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_box_autoadd_quic_client_config(
    QuicClientConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_quic_client_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_quic_read_exception(
    QuicReadException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_quic_read_exception(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_list_list_prim_u_8_strict(
    List<Uint8List> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_prim_u_8_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
    List<int> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(
      self is Uint8List ? self : Uint8List.fromList(self),
    );
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(
    BigInt? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
    Uint8List? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_quic_client_config(
    QuicClientConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.maxConnectionsPerHost, serializer);
    sse_encode_u_64(self.connectTimeoutMs, serializer);
    sse_encode_u_64(self.requestTimeoutMs, serializer);
    sse_encode_u_32(self.retryAttempts, serializer);
    sse_encode_u_64(self.retryDelayMs, serializer);
    sse_encode_u_64(self.keepAliveTimeoutMs, serializer);
  }

  @protected
  void sse_encode_quic_connection_stats(
    QuicConnectionStats self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_quic_path_stats(self.path, serializer);
    sse_encode_quic_frame_stats(self.frameTx, serializer);
    sse_encode_quic_frame_stats(self.frameRx, serializer);
    sse_encode_quic_udp_stats(self.udpTx, serializer);
    sse_encode_quic_udp_stats(self.udpRx, serializer);
  }

  @protected
  void sse_encode_quic_datagram_exception(
    QuicDatagramException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case QuicDatagramException_UnsupportedByPeer():
        sse_encode_i_32(0, serializer);
      case QuicDatagramException_TooLarge(maxSize: final maxSize):
        sse_encode_i_32(1, serializer);
        sse_encode_usize(maxSize, serializer);
      case QuicDatagramException_ConnectionLost(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_quic_error(QuicError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case QuicError_Connection(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case QuicError_Endpoint(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case QuicError_Stream(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case QuicError_Tls(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_String(field0, serializer);
      case QuicError_Config(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_String(field0, serializer);
      case QuicError_Network(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_String(field0, serializer);
      case QuicError_Write(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_quic_frame_stats(
    QuicFrameStats self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.acks, serializer);
    sse_encode_u_64(self.crypto, serializer);
    sse_encode_u_64(self.connectionClose, serializer);
    sse_encode_u_64(self.dataBlocked, serializer);
    sse_encode_u_64(self.datagram, serializer);
    sse_encode_u_64(self.handshakeDone, serializer);
    sse_encode_u_64(self.maxData, serializer);
    sse_encode_u_64(self.maxStreamData, serializer);
    sse_encode_u_64(self.maxStreamsBidi, serializer);
    sse_encode_u_64(self.maxStreamsUni, serializer);
    sse_encode_u_64(self.newConnectionId, serializer);
    sse_encode_u_64(self.newToken, serializer);
    sse_encode_u_64(self.pathChallenge, serializer);
    sse_encode_u_64(self.pathResponse, serializer);
    sse_encode_u_64(self.ping, serializer);
    sse_encode_u_64(self.resetStream, serializer);
    sse_encode_u_64(self.retireConnectionId, serializer);
    sse_encode_u_64(self.stream, serializer);
    sse_encode_u_64(self.streamDataBlocked, serializer);
    sse_encode_u_64(self.streamsBlockedBidi, serializer);
    sse_encode_u_64(self.streamsBlockedUni, serializer);
    sse_encode_u_64(self.stopSending, serializer);
  }

  @protected
  void sse_encode_quic_path_stats(
    QuicPathStats self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.rttMillis, serializer);
    sse_encode_u_64(self.cwnd, serializer);
    sse_encode_u_64(self.lostPackets, serializer);
    sse_encode_u_64(self.lostBytes, serializer);
    sse_encode_u_64(self.sentPackets, serializer);
    sse_encode_u_64(self.congestionEvents, serializer);
  }

  @protected
  void sse_encode_quic_read_exception(
    QuicReadException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case QuicReadException_Reset(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_u_64(field0, serializer);
      case QuicReadException_ConnectionLost(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case QuicReadException_ZeroRttRejected():
        sse_encode_i_32(2, serializer);
      case QuicReadException_ClosedStream():
        sse_encode_i_32(3, serializer);
      case QuicReadException_IllegalOrderedRead():
        sse_encode_i_32(4, serializer);
    }
  }

  @protected
  void sse_encode_quic_read_to_end_exception(
    QuicReadToEndException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case QuicReadToEndException_Read(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_quic_read_exception(field0, serializer);
      case QuicReadToEndException_TooLong():
        sse_encode_i_32(1, serializer);
    }
  }

  @protected
  void sse_encode_quic_udp_stats(QuicUdpStats self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.datagrams, serializer);
    sse_encode_u_64(self.bytes, serializer);
    sse_encode_u_64(self.ios, serializer);
  }

  @protected
  void sse_encode_quic_write_exception(
    QuicWriteException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case QuicWriteException_Stopped(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_u_64(field0, serializer);
      case QuicWriteException_ConnectionLost(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_client_quic_client_config(
    (QuicClient, QuicClientConfig) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
      self.$1,
      serializer,
    );
    sse_encode_quic_client_config(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_client_string(
    (QuicClient, String) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicClient(
      self.$1,
      serializer,
    );
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_send_stream(
    (QuicConnection, QuicSendStream) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
      self.$1,
      serializer,
    );
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
      self.$2,
      serializer,
    );
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_send_stream_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_recv_stream(
    (QuicConnection, QuicSendStream, QuicRecvStream) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
      self.$1,
      serializer,
    );
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
      self.$2,
      serializer,
    );
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream(
      self.$3,
      serializer,
    );
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_opt_box_autoadd_usize(
    (QuicConnection, BigInt?) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
      self.$1,
      serializer,
    );
    sse_encode_opt_box_autoadd_usize(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_opt_list_prim_u_8_strict(
    (QuicConnection, Uint8List?) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
      self.$1,
      serializer,
    );
    sse_encode_opt_list_prim_u_8_strict(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_opt_string(
    (QuicConnection, String?) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
      self.$1,
      serializer,
    );
    sse_encode_opt_String(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_quic_connection_stats(
    (QuicConnection, QuicConnectionStats) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
      self.$1,
      serializer,
    );
    sse_encode_quic_connection_stats(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_socket_address(
    (QuicConnection, SocketAddress) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
      self.$1,
      serializer,
    );
    sse_encode_socket_address(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_u_64(
    (QuicConnection, BigInt) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
      self.$1,
      serializer,
    );
    sse_encode_u_64(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection_usize(
    (QuicConnection, BigInt) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
      self.$1,
      serializer,
    );
    sse_encode_usize(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_endpoint_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_connection(
    (QuicEndpoint, QuicConnection) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicEndpoint(
      self.$1,
      serializer,
    );
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicConnection(
      self.$2,
      serializer,
    );
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_recv_stream_list_prim_u_8_strict(
    (QuicRecvStream, Uint8List) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream(
      self.$1,
      serializer,
    );
    sse_encode_list_prim_u_8_strict(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_recv_stream_opt_list_prim_u_8_strict(
    (QuicRecvStream, Uint8List?) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicRecvStream(
      self.$1,
      serializer,
    );
    sse_encode_opt_list_prim_u_8_strict(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_quic_send_stream_usize(
    (QuicSendStream, BigInt) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuicSendStream(
      self.$1,
      serializer,
    );
    sse_encode_usize(self.$2, serializer);
  }

  @protected
  void sse_encode_socket_address(SocketAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.ip, serializer);
    sse_encode_u_16(self.port, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class QuicClientImpl extends RustOpaque implements QuicClient {
  // Not to be used by end users
  QuicClientImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  QuicClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_QuicClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_QuicClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_QuicClientPtr,
  );
}

@sealed
class QuicConnectionImpl extends RustOpaque implements QuicConnection {
  // Not to be used by end users
  QuicConnectionImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  QuicConnectionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_QuicConnection,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_QuicConnection,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_QuicConnectionPtr,
  );
}

@sealed
class QuicEndpointConfigImpl extends RustOpaque implements QuicEndpointConfig {
  // Not to be used by end users
  QuicEndpointConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  QuicEndpointConfigImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_QuicEndpointConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_QuicEndpointConfig,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_QuicEndpointConfigPtr,
  );
}

@sealed
class QuicEndpointImpl extends RustOpaque implements QuicEndpoint {
  // Not to be used by end users
  QuicEndpointImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  QuicEndpointImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_QuicEndpoint,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_QuicEndpoint,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_QuicEndpointPtr,
  );
}

@sealed
class QuicRecvStreamImpl extends RustOpaque implements QuicRecvStream {
  // Not to be used by end users
  QuicRecvStreamImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  QuicRecvStreamImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_QuicRecvStream,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_QuicRecvStream,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_QuicRecvStreamPtr,
  );
}

@sealed
class QuicSendStreamImpl extends RustOpaque implements QuicSendStream {
  // Not to be used by end users
  QuicSendStreamImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  QuicSendStreamImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_QuicSendStream,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_QuicSendStream,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_QuicSendStreamPtr,
  );
}

@sealed
class QuicServerConfigImpl extends RustOpaque implements QuicServerConfig {
  // Not to be used by end users
  QuicServerConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  QuicServerConfigImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_QuicServerConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_QuicServerConfig,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_QuicServerConfigPtr,
  );
}

@sealed
class QuicTransportConfigImpl extends RustOpaque
    implements QuicTransportConfig {
  // Not to be used by end users
  QuicTransportConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  QuicTransportConfigImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_increment_strong_count_QuicTransportConfig,
    rustArcDecrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_QuicTransportConfig,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_QuicTransportConfigPtr,
  );
}
